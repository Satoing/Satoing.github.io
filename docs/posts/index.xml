<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jup的博客</title>
    <link>https://satoing.github.io/posts/</link>
    <description>Recent content in Posts on Jup的博客</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://satoing.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【科普向】直播系统（上）</title>
      <link>https://satoing.github.io/posts/%E7%A7%91%E6%99%AE%E5%90%91%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F%E4%B8%8A/</link>
      <pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate>
      <guid>https://satoing.github.io/posts/%E7%A7%91%E6%99%AE%E5%90%91%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F%E4%B8%8A/</guid>
      <description>&lt;p&gt;上篇文章中简单学习了视频编码，有了一定的基础知识。这篇文章来来看看直播系统的架构。&lt;/p&gt;&#xA;&lt;p&gt;本篇文章讨论的直播，指的是B站、抖音上的传统直播；而不是腾讯会议、视频通话这样的实时互动直播。后者主要考虑传输的实时性，通常将UDP作为底层协议；前者更注重画面质量和流畅度，对延迟的容忍性相对较高，通常使用TCP。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一直播系统基础架构&#34;&gt;一、直播系统基础架构&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-实现分析&#34;&gt;1.1 实现分析&lt;/h3&gt;&#xA;&lt;p&gt;不妨先分析分析直播系统的需求。主播需要将自己的直播画面推送给直播间的观众，直播间的观众可以进行文字聊天和打赏。&lt;/p&gt;&#xA;&lt;p&gt;主播将自己的直播画面推给观众，其实就是“采集-&amp;gt;编码-&amp;gt;推流 || -&amp;gt; || 拉流-&amp;gt;解码-&amp;gt;播放”的过程。&lt;/p&gt;&#xA;&lt;h4 id=&#34;111-主播侧&#34;&gt;1.1.1 主播侧&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;主播侧要完成画面采集-&amp;gt;编码-&amp;gt;推流&lt;/strong&gt;。摄像头、麦克风采集到音视频数据后，由客户端进行编码。编码可以纯软件实现，由CPU进行编码；但是最好还是辅以GPU硬件加速，所以一般对主播的设备要求较高。最后将主播的音视频数据推送给服务器，这就是推流。主播侧的客户端，要实现的基本功能就是编码和推流，如哔哩哔哩直播姬。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746547646694-fa82abaa-22e3-4f37-a679-3e6caa708944.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;112-观众侧&#34;&gt;1.1.2 观众侧&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;观众侧完成直播流的拉取-&amp;gt;解码-&amp;gt;播放&lt;/strong&gt;。拉取到的直播流是经过编码压缩的，所以需要在本地解码，转换为YUV视频帧后，再由本地播放器播放。实际上，解码-&amp;gt;播放的过程，目前已有很多开源的实现，如VLC，支持直接播放各种协议的直播流。通常把这些项目接入即可实现观众侧客户端。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746548605617-d565330d-20ac-4eb1-af9f-2b9d3619f01a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;113-业务侧&#34;&gt;1.1.3 业务侧&lt;/h4&gt;&#xA;&lt;p&gt;除了上面的音视频技术，直播系统还需要对房间进行维护，以及实现直播间的聊天和打赏等。这属于直播中业务系统的范畴，称为信令服务器。&lt;/p&gt;&#xA;&lt;p&gt;在直播的场景下，用户量可以非常庞大。业务不仅需要考虑高并发，还需要考虑服务器转发消息的数量级。如A发送的聊天，直播间中所有观众都要看到，需要服务器主动往客户端推送。如果主播说扣1抽奖，直播间1W个观众都发了1，那么需要转发1W✖️1W条消息。这种场景如何避免消息洪泛，还是很有挑战性的，但是不在本篇的讨论范围内。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-流程总结&#34;&gt;1.2 流程总结&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746546414872-fe6551c0-9797-4aa3-a9b7-ffa44f858bd5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;主播使用PC、手机都可以创建直播间。向信令服务器发送创建房间的请求，信令服务器返回推流的地址。图中1、3所示。&lt;/li&gt;&#xA;&lt;li&gt;主播将自己采集、编码的音视频数据推送到推流地址，如图中2、4所示。&lt;/li&gt;&#xA;&lt;li&gt;观众加入直播间。向信令服务器发送加入房间的请求，信令服务器返回直播流的地址。如图中5、6所示。&lt;/li&gt;&#xA;&lt;li&gt;观众在直播间中聊天、打赏，直接和信令服务器交互。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二cdn&#34;&gt;二、CDN&lt;/h2&gt;&#xA;&lt;p&gt;CDN即内容分发网络。将静态资源缓存到边缘节点，用户从最近的节点获取资源，减少物理距离带来的延迟。&lt;/p&gt;&#xA;&lt;p&gt;CDN网络如下图所示。源节点是CDN网络的入口；主干节点通常用于缓存和跨运营商传输；边缘节点数量众多，一般部署到各地级市，用于解决“网络最后一公里”的问题。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746625973079-041efea7-1e11-41cb-beb5-6f63b1421648.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在直播系统中，CDN的作用不仅仅是降低延迟，其分布式架构能有效解决直播中的一系列技术挑战：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;负载均衡：将观众的请求分散到多个边缘节点，避免源站过载。源站只需要推送一路流到CDN源节点，CDN内部分发到各个节点。&lt;/li&gt;&#xA;&lt;li&gt;带宽分摊：源站只需维持一路流，6Mbps基本能满足需求。&lt;/li&gt;&#xA;&lt;li&gt;多级缓存、故障切换：缓存热门直播流，即使CDN节点短暂网络波动，也能正常提供数据。若某个节点故障，CDN自动将观众迁移到健康节点。&lt;/li&gt;&#xA;&lt;li&gt;动态扩容：CDN节点可以非常方便地横向拓展，应对赛事等突发热门直播的场景。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;三hls&#34;&gt;三、HLS&lt;/h2&gt;&#xA;&lt;p&gt;HLS协议在直播和点播中都应用得非常广泛。它的核心是&lt;strong&gt;将视频流分割成一系列短时长的ts文件，同时生成m3u8索引文件&lt;/strong&gt;，通过http协议传输，兼容性极强。&lt;/p&gt;&#xA;&lt;p&gt;同时编码器可以将不同分辨率的视频流各自分片生成对应的m3u8文件，实现分辨率的切换。&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-生成hls流&#34;&gt;3.1 生成HLS流&lt;/h3&gt;&#xA;&lt;p&gt;使用ffmpeg将test.mp4转换成HLS切片和索引：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ffmpeg -i test.mp4 -c copy -start_number &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -hls_time &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; -hls_list_size &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -hls_segment_filename test%03d.ts index.m3u&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关键参数说明：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;-c copy，表示只是进行封装格式的转换，不需要转码。因为mp4和hls使用的都是H.264编码。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;-hls_time，表示每个ts文件的最大时长，单位是秒。但是由于没有重新编码，所以这个时长并不准确。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;-hls_segment_filename，表示指定ts文件的名称。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;32-m3u8格式分析&#34;&gt;3.2 m3u8格式分析&lt;/h3&gt;&#xA;&lt;p&gt;生成的m3u8及注释如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【科普向】视频编解码</title>
      <link>https://satoing.github.io/posts/%E7%A7%91%E6%99%AE%E5%90%91%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/</link>
      <pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate>
      <guid>https://satoing.github.io/posts/%E7%A7%91%E6%99%AE%E5%90%91%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;玩nas经常听到视频编码、解码、转码这些词，然后又和CPU、显卡关联，有点让人摸不着头脑。&lt;/p&gt;&#xA;&lt;p&gt;下面这篇文章对一些关键概念解释的比较清楚：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://post.smzdm.com/p/alldz028/&#34;&gt;科普向:一文搞懂什么是串流、硬解、转码，你的nas真的需要硬解吗？&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746416314180-8e76cafd-8a05-4b67-a66f-4966fdc52329.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是里面还是有很多不严谨的地方，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746416395493-8300fca4-e456-4789-acda-4c77e8c5149d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;正好这里又涉及到码率（容易和帧率混淆）等一知半解的概念，不妨在这篇文章中一起探索探索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一图像和视频&#34;&gt;一、图像和视频&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-图像&#34;&gt;1.1 图像&lt;/h3&gt;&#xA;&lt;p&gt;图像由像素组成，彩色图像的每个像素一般包含RGB三个通道（也有A通道表示透明度）。每个通道通常的位深是8bit，即每个通道能表示256中颜色，三个通道总共能表示1677万种颜色。&lt;/p&gt;&#xA;&lt;p&gt;图像的清晰度可以由分辨率来衡量。日常中熟悉的分辨率有&lt;!-- raw HTML omitted --&gt; 360P（640x360）、720P（1280x720）、1080P（1920x1080）、4K（3840x2160）、8K（7680x4320）。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;那么问题来了，一张1080P的彩色图像，按照上面的算法，图片的大小应该恒等于 3B&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;✖️&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1920&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;✖️&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1080 = 5.93MB。而实际使用感知是，相同分辨率，色彩越简单，图片越小。这是因为常用的图片格式会对图片进行压缩。不过图片的压缩算法不在本篇的讨论范围内。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746417802695-16986586-c58f-4766-8339-14ee134a3344.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;读着不妨用opencv验证验证：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;其实最好用png测试，因为jpg的有损压缩是不可逆的。但是还原出的位图也是1080p，问题不大~&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jupng.top:7326/yuque/0/2025/png/2648742/1746418023006-5d3d6a5d-6f5f-47e6-9db2-5757c9a92533.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>博客搭建</title>
      <link>https://satoing.github.io/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>https://satoing.github.io/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;搭建静态博客需要考虑以下方面：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;选择什么框架和主题？几个流行的静态博客框架，各自有哪些优缺点？&lt;/li&gt;&#xA;&lt;li&gt;部署在哪？部署在云服务器上，还是直接使用静态网站托管平台？&lt;/li&gt;&#xA;&lt;li&gt;图床的搭建？使用对象存储，或者其他奇技淫巧？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;一框架和主题&#34;&gt;一、框架和主题&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;框架&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;语言&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;特点&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;适合人群&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Go&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;生成速度最快（毫秒级）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;追求极速构建&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Ruby&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;GitHub Pages 原生支持&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;新手/小型博客&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;Hexo&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Node.js&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;插件生态丰富&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;前端开发者&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;Gatsby&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;React&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;支持动态数据（GraphQL）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;React 开发者&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;Astro&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;JS/TS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;混合静态+动态渲染&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;现代 Web 项目&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;作为一个后台程序员，自然首选hugo。主题选择以简洁为主的Paper。&lt;/p&gt;&#xA;&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;hugo.toml&lt;/code&gt;中，增加导航栏和基本信息的配置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://satoing.github.io&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;languageCode&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jup的博客&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;paper&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[&lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;首页&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[&lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;文章&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/posts/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[&lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;分类&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/categories&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[&lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;标签&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tags&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;outputs&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTML&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JSON&amp;#34;&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;# 允许生成JSON&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# color style&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linen&amp;#39;&lt;/span&gt;                 &lt;span style=&#34;color:#75715e&#34;&gt;# linen, wheat, gray, light&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# header social icons&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;github&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;satoing&amp;#39;&lt;/span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;# github.com/YOUR_GITHUB_ID&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;rss&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;# show rss icon&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# home page profile&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;avatar&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;# gravatar email or image url&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jup&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;bio&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;青山旧歌谣&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# misc&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;disableHLJS&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;# disable highlight.js&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;disablePostNavigation&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# disable post navigation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;monoDarkIcon&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;# show monochrome dark mode icon&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;# enable KaTeX math typesetting globally&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;localKatex&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;# use local KaTeX js/css instead of CDN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;favicon&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;# customize the default favicon&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;appleTouchIcon&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;   &#x9;&#x9;&#x9;&#x9; &lt;span style=&#34;color:#75715e&#34;&gt;# customize the default Apple touch icon&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;&#xA;&lt;p&gt;尝试新增一篇文章：&lt;code&gt;hugo new posts/first-post.md&lt;/code&gt;，然后&lt;code&gt;hugo server&lt;/code&gt;运行http服务器。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
